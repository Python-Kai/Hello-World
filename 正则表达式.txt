正则表达式
1. 在正则表达式中，如果直接给出字符，就是精确匹配。用\d可以匹配一个数字，\w可以匹配一个字母或数字，\s可以匹配一个空格（也包括Tab等空白符）。
2. 要匹配变长的字符，在正则表达式中，用*表示任意个字符（包括0个），用+表示至少一个字符，用?表示0个或1个字符，用{n}表示n个字符，用{n,m}表示n-m个字符。
3. 更精确的匹配，可以用[]表示范围，比如[0-9a-zA-Z\_]可以匹配一个数字、字母或者下划线；
4. A|B可以匹配A或者B.^表示行的开头，^\d表示必须以数字开头。$表示行的结束，\d$表示必须以数字结束。

5. Re模块包含所有正则表达式的功能。由于Python的字符串本身也用\转义，所以可以用r前缀，就不用考虑转义的问题，比如 s = r'ABC\-001'表示'ABC\-001'.
6. match()方法判读是否匹配，若匹配成功，返回一个Match对象，否则返回None。 常见判读方法：
test = '用户输入的字符串'
if re.match(r'正则表达式', test):
  print('ok')
 else:
  print('failed')
  
 7. 除了判断是否匹配之外，正则表达式还有提取子串的功能。用()表示的就是要提取的分组(Group)。比如：
 ^(\d{3})-(\d{3,8})$分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码。
  
